#!/bin/bash
# Reference: https://github.com/connermcd/notes
# Script has been further improved as my convience to search and generate the note takings pdf

set -e

usage() {
cat << EOF
USAGE:

   notes <workdir> [subfolder]

EXAMPLES:

   notes /path/to/notes
      compiles all notes in the specified directory and its subdirectories, and creates a merged PDF in the parent directory

   notes /path/to/notes somefolder
      compiles notes in somefolder subfolder, and creates a merged PDF in that subfolder

   notes /path/to/notes somefolder/subfolder
      compiles notes in somefolder/subfolder, and creates a merged PDF in that subfolder

EOF
}

makepdf() {
   local output_file="$1"
   shift
   local input_files=("$@")
   
   pandoc --pdf-engine=lualatex -H $SCRIPT_DIR/fonts.tex --toc \
      -V geometry:margin=2.5cm \
      -o "${output_file}.pdf" $SCRIPT_DIR/about.md "${input_files[@]}" &&
   echo "Created ${output_file}.pdf"
}

makehtml() {
   local output_file="$1"
   shift
   local input_files=("$@")
   
   pandoc -w slidy -H $SCRIPT_DIR/slidy.html -s "${input_files[@]}" | \
      sed -e 's/<h[2-9]/<\/div><div class=\"slide\">&/' \
      -e 's/slidy.js.gz/slidy.js/' > "${output_file}.html" &&
      echo "Created ${output_file}.html"
}

process_directory() {
   local dir="$1"
   local output_name="$2"
   
   echo "Processing directory: $dir"
   
   # Find all .txt and .md files
   local files=()
   while IFS= read -r -d '' file; do
      files+=("$file")
   done < <(find "$dir" -maxdepth 1 -type f \( -name "*.md" -o -name "*.txt" \) -print0 | sort -z)
   
   if [[ ${#files[@]} -eq 0 ]]; then
      echo "No .txt or .md files found in $dir"
      return 1
   fi
   
   echo "Found ${#files[@]} files: ${files[*]}"
   
   local output_file="$dir/$output_name"
   makepdf "$output_file" "${files[@]}"
   makehtml "$output_file" "${files[@]}"
   
   echo "Completed processing: $dir"
}

# Merge all notes from all subfolders into a single PDF in the parent directory
make_merged_pdf_for_parent() {
   local parent_dir="$1"
   local merged_output_name
   merged_output_name=$(basename "$parent_dir")

   # Find all .md and .txt files in all subdirectories (excluding the parent itself)
   local all_files=()
   while IFS= read -r -d '' file; do
      all_files+=("$file")
   done < <(find "$parent_dir" -mindepth 2 -type f \( -name "*.md" -o -name "*.txt" \) -print0 | sort -z)

   if [[ ${#all_files[@]} -eq 0 ]]; then
      echo "No .md or .txt files found in subfolders of $parent_dir for merged PDF"
      return 1
   fi

   local merged_output_file="$parent_dir/$merged_output_name"
   echo "Creating merged PDF for all subfolders: $merged_output_file.pdf"
   makepdf "$merged_output_file" "${all_files[@]}"
   makehtml "$merged_output_file" "${all_files[@]}"
   echo "Merged PDF and HTML created: $merged_output_file"
}

# Recursively process all directories containing .md or .txt files
process_all_recursive() {
   local base_dir="$1"
   local found_any=0

   # Find all directories (including base_dir) that contain .md or .txt files
   while IFS= read -r -d '' dir; do
      local files=()
      while IFS= read -r -d '' file; do
         files+=("$file")
      done < <(find "$dir" -maxdepth 1 -type f \( -name "*.md" -o -name "*.txt" \) -print0 | sort -z)
      if [[ ${#files[@]} -gt 0 ]]; then
         found_any=1
         local output_name
         output_name=$(basename "$dir")
         process_directory "$dir" "$output_name"
      fi
   done < <(find "$base_dir" -type d -print0 | sort -z)

   if [[ $found_any -eq 0 ]]; then
      echo "No .md or .txt files found in $base_dir or its subdirectories"
      return 1
   fi

   # After processing all, create merged PDF for the parent directory
   make_merged_pdf_for_parent "$base_dir"
}

process_subfolder() {
   local subfolder="$1"
   local subfolder_path="$NOTES_DIR/$subfolder"
   
   echo "Processing subfolder: $subfolder"

   if [[ ! -d "$subfolder_path" ]]; then
      echo "Subfolder does not exist: $subfolder_path"
      return 1
   fi

   # Recursively process all directories under the subfolder
   process_all_recursive "$subfolder_path"
}

process_all() {
   echo "Processing all notes in: $NOTES_DIR"
   process_all_recursive "$NOTES_DIR"
}

main() {
   # Check if workdir argument is provided
   if [[ $# -eq 0 ]]; then
      echo "Error: Work directory argument is required"
      usage
      exit 1
   fi
   
   SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
   
   # Check for required files in script directory
   if [[ ! -f "$SCRIPT_DIR/about.md" ]]; then
      echo "Error: Required file not found: $SCRIPT_DIR/about.md"
      exit 1
   fi
   
   # Handle subfolder argument
   if [[ $# -eq 2 ]]; then
      NOTES_DIR="$1"
      subfolder="$2"
      
      # Validate NOTES_DIR
      if [[ ! -d "$NOTES_DIR" ]]; then
         echo "Error: Work directory not found: $NOTES_DIR"
         exit 1
      fi
      
      # Check if subfolder exists
      if [[ ! -d "$NOTES_DIR/$subfolder" ]]; then
         echo "Error: Subfolder not found: $NOTES_DIR/$subfolder"
         exit 1
      fi
      
      # Process specific subfolder (recursively)
      echo "Compiling notes in subfolder: $subfolder"
      process_subfolder "$subfolder"
   else
      # Single argument - could be workdir or direct path
      if [[ -d "$1" ]]; then
         NOTES_DIR="$1"
         process_all
      else
         echo "Error: Directory not found: $1"
         exit 1
      fi
   fi
   
   echo "Script execution completed successfully"
}

# Run main function
main "$@"